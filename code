let express = require("express");
const { allowDevAllOrigin, allowAllOrigin, percentageToColor, filterAndJoin, send403 } = require("../util-server");
const { R } = require("redbean-node");
const apicache = require("../modules/apicache");
const Monitor = require("../model/monitor");
const dayjs = require("dayjs");
const { UP, DOWN, flipStatus, log } = require("../../src/util");
const StatusPage = require("../model/status_page");
const { UptimeKumaServer } = require("../uptime-kuma-server");
const { makeBadge } = require("badge-maker");
const { badgeConstants } = require("../config");
const compareVersions = require("compare-versions");
const args = require("args-parser")(process.argv);
const apiserver = UptimeKumaServer.getInstance(args);
const { Notification } = require("../notification");
Notification.init();
const { Proxy } = require("../proxy");

async function updateMonitorNotification(monitorID, notificationIDList) {
    await R.exec("DELETE FROM monitor_notification WHERE monitor_id = ? ", [
        monitorID,
    ]);

    for (let notificationID in notificationIDList) {
        if (notificationIDList[notificationID]) {
            let relation = R.dispense("monitor_notification");
            relation.monitor_id = monitorID;
            relation.notification_id = notificationID;
            await R.store(relation);
        }
    }
}

async function checkOwner(userID, monitorID) {
    let row = await R.getRow("SELECT id FROM monitor WHERE id = ? AND user_id = ? ", [
        monitorID,
        userID,
    ]);

    if (! row) {
        throw new Error("You do not own this monitor.");
    }
}

async function startMonitor(userID, monitorID) {
    await checkOwner(userID, monitorID);

    log.info("manage", `Resume Monitor: ${monitorID} User ID: ${userID}`);

    await R.exec("UPDATE monitor SET active = 1 WHERE id = ? AND user_id = ? ", [
        monitorID,
        userID,
    ]);

    let monitor = await R.findOne("monitor", " id = ? ", [
        monitorID,
    ]);

    if (monitor.id in apiserver.monitorList) {
        apiserver.monitorList[monitor.id].stop();
    }

    apiserver.monitorList[monitor.id] = monitor;
    monitor.start(io);
}

async function pauseMonitor(userID, monitorID) {
    await checkOwner(userID, monitorID);

    log.info("manage", `Pause Monitor: ${monitorID} User ID: ${userID}`);

    await R.exec("UPDATE monitor SET active = 0 WHERE id = ? AND user_id = ? ", [
        monitorID,
        userID,
    ]);

    if (monitorID in apiserver.monitorList) {
        apiserver.monitorList[monitorID].stop();
    }
}


let router = express.Router();

let cache = apicache.middleware;
const server = UptimeKumaServer.getInstance();
let io = server.io;

router.get("/api/entry-page", async (request, response) => {
    allowDevAllOrigin(response);

    let result = { };

    if (request.hostname in StatusPage.domainMappingList) {
        result.type = "statusPageMatchedDomain";
        result.statusPageSlug = StatusPage.domainMappingList[request.hostname];
    } else {
        result.type = "entryPage";
        result.entryPage = server.entryPage;
    }
    response.json(result);
});

router.get("/api/push/:pushToken", async (request, response) => {
    try {

        let pushToken = request.params.pushToken;
        let msg = request.query.msg || "OK";
        let ping = request.query.ping || null;
        let statusString = request.query.status || "up";
        let status = (statusString === "up") ? UP : DOWN;

        let monitor = await R.findOne("monitor", " push_token = ? AND active = 1 ", [
            pushToken
        ]);

        if (! monitor) {
            throw new Error("Monitor not found or not active.");
        }

        const previousHeartbeat = await Monitor.getPreviousHeartbeat(monitor.id);

        if (monitor.isUpsideDown()) {
            status = flipStatus(status);
        }

        let isFirstBeat = true;
        let previousStatus = status;
        let duration = 0;

        let bean = R.dispense("heartbeat");
        bean.time = R.isoDateTimeMillis(dayjs.utc());

        if (previousHeartbeat) {
            isFirstBeat = false;
            previousStatus = previousHeartbeat.status;
            duration = dayjs(bean.time).diff(dayjs(previousHeartbeat.time), "second");
        }

        log.debug("router", `/api/push/ called at ${dayjs().format("YYYY-MM-DD HH:mm:ss.SSS")}`);
        log.debug("router", "PreviousStatus: " + previousStatus);
        log.debug("router", "Current Status: " + status);

        bean.important = Monitor.isImportantBeat(isFirstBeat, previousStatus, status);
        bean.monitor_id = monitor.id;
        bean.status = status;
        bean.msg = msg;
        bean.ping = ping;
        bean.duration = duration;

        await R.store(bean);

        io.to(monitor.user_id).emit("heartbeat", bean.toJSON());
        Monitor.sendStats(io, monitor.id, monitor.user_id);

        response.json({
            ok: true,
        });

        if (bean.important) {
            await Monitor.sendNotification(isFirstBeat, monitor, bean);
        }

    } catch (e) {
        response.status(404).json({
            ok: false,
            msg: e.message
        });
    }
});

router.get("/api/badge/:id/status", cache("5 minutes"), async (request, response) => {
    allowAllOrigin(response);

    const {
        label,
        upLabel = "Up",
        downLabel = "Down",
        upColor = badgeConstants.defaultUpColor,
        downColor = badgeConstants.defaultDownColor,
        style = badgeConstants.defaultStyle,
        value, // for demo purpose only
    } = request.query;

    try {
        const requestedMonitorId = parseInt(request.params.id, 10);
        const overrideValue = value !== undefined ? parseInt(value) : undefined;

        let publicMonitor = await R.getRow(`
                SELECT monitor_group.monitor_id FROM monitor_group, \`group\`
                WHERE monitor_group.group_id = \`group\`.id
                AND monitor_group.monitor_id = ?
                AND public = 1
            `,
        [ requestedMonitorId ]
        );

        const badgeValues = { style };

        if (!publicMonitor) {
            // return a "N/A" badge in naColor (grey), if monitor is not public / not available / non exsitant

            badgeValues.message = "N/A";
            badgeValues.color = badgeConstants.naColor;
        } else {
            const heartbeat = await Monitor.getPreviousHeartbeat(requestedMonitorId);
            const state = overrideValue !== undefined ? overrideValue : heartbeat.status === 1;

            badgeValues.label = label ? label : "";
            badgeValues.color = state ? upColor : downColor;
            badgeValues.message = label ?? state ? upLabel : downLabel;
        }

        // build the svg based on given values
        const svg = makeBadge(badgeValues);

        response.type("image/svg+xml");
        response.send(svg);
    } catch (error) {
        send403(response, error.message);
    }
});

router.get("/api/badge/:id/uptime/:duration?", cache("5 minutes"), async (request, response) => {
    allowAllOrigin(response);

    const {
        label,
        labelPrefix,
        labelSuffix = badgeConstants.defaultUptimeLabelSuffix,
        prefix,
        suffix = badgeConstants.defaultUptimeValueSuffix,
        color,
        labelColor,
        style = badgeConstants.defaultStyle,
        value, // for demo purpose only
    } = request.query;

    try {
        const requestedMonitorId = parseInt(request.params.id, 10);
        // if no duration is given, set value to 24 (h)
        const requestedDuration = request.params.duration !== undefined ? parseInt(request.params.duration, 10) : 24;
        const overrideValue = value && parseFloat(value);

        let publicMonitor = await R.getRow(`
                SELECT monitor_group.monitor_id FROM monitor_group, \`group\`
                WHERE monitor_group.group_id = \`group\`.id
                AND monitor_group.monitor_id = ?
                AND public = 1
            `,
        [ requestedMonitorId ]
        );

        const badgeValues = { style };

        if (!publicMonitor) {
            // return a "N/A" badge in naColor (grey), if monitor is not public / not available / non exsitant
            badgeValues.message = "N/A";
            badgeValues.color = badgeConstants.naColor;
        } else {
            const uptime = overrideValue ?? await Monitor.calcUptime(
                requestedDuration,
                requestedMonitorId
            );

            // limit the displayed uptime percentage to four (two, when displayed as percent) decimal digits
            const cleanUptime = parseFloat(uptime.toPrecision(4));

            // use a given, custom color or calculate one based on the uptime value
            badgeValues.color = color ?? percentageToColor(uptime);
            // use a given, custom labelColor or use the default badge label color (defined by badge-maker)
            badgeValues.labelColor = labelColor ?? "";
            // build a lable string. If a custom label is given, override the default one (requestedDuration)
            badgeValues.label = filterAndJoin([ labelPrefix, label ?? requestedDuration, labelSuffix ]);
            badgeValues.message = filterAndJoin([ prefix, `${cleanUptime * 100}`, suffix ]);
        }

        // build the SVG based on given values
        const svg = makeBadge(badgeValues);

        response.type("image/svg+xml");
        response.send(svg);
    } catch (error) {
        send403(response, error.message);
    }
});

router.get("/api/badge/:id/ping/:duration?", cache("5 minutes"), async (request, response) => {
    allowAllOrigin(response);

    const {
        label,
        labelPrefix,
        labelSuffix = badgeConstants.defaultPingLabelSuffix,
        prefix,
        suffix = badgeConstants.defaultPingValueSuffix,
        color = badgeConstants.defaultPingColor,
        labelColor,
        style = badgeConstants.defaultStyle,
        value, // for demo purpose only
    } = request.query;

    try {
        const requestedMonitorId = parseInt(request.params.id, 10);

        // Default duration is 24 (h) if not defined in queryParam, limited to 720h (30d)
        const requestedDuration = Math.min(request.params.duration ? parseInt(request.params.duration, 10) : 24, 720);
        const overrideValue = value && parseFloat(value);

        const publicAvgPing = parseInt(await R.getCell(`
                SELECT AVG(ping) FROM monitor_group, \`group\`, heartbeat
                WHERE monitor_group.group_id = \`group\`.id
                AND heartbeat.time > DATETIME('now', ? || ' hours')
                AND heartbeat.ping IS NOT NULL
                AND public = 1
                AND heartbeat.monitor_id = ?
            `,
        [ -requestedDuration, requestedMonitorId ]
        ));

        const badgeValues = { style };

        if (!publicAvgPing) {
            // return a "N/A" badge in naColor (grey), if monitor is not public / not available / non exsitant

            badgeValues.message = "N/A";
            badgeValues.color = badgeConstants.naColor;
        } else {
            const avgPing = parseInt(overrideValue ?? publicAvgPing);

            badgeValues.color = color;
            // use a given, custom labelColor or use the default badge label color (defined by badge-maker)
            badgeValues.labelColor = labelColor ?? "";
            // build a lable string. If a custom label is given, override the default one (requestedDuration)
            badgeValues.label = filterAndJoin([ labelPrefix, label ?? requestedDuration, labelSuffix ]);
            badgeValues.message = filterAndJoin([ prefix, avgPing, suffix ]);
        }

        // build the SVG based on given values
        const svg = makeBadge(badgeValues);

        response.type("image/svg+xml");
        response.send(svg);
    } catch (error) {
        send403(response, error.message);
    }
});

router.post("/api/importbackup", async (request, response) => {
    try {

        let backupData = JSON.parse(request.body);
        let importHandle = request.headers.importHandle

        //log.info("manage", `Importing Backup, User ID: ${socket.userID}, Version: ${backupData.version}`);

        let notificationListData = backupData.notificationList;
        let proxyListData = backupData.proxyList;
        let monitorListData = backupData.monitorList;

        let version17x = compareVersions.compare(backupData.version, "1.7.0", ">=");

        // If the import option is "overwrite" it'll clear most of the tables, except "settings" and "user"
        if (importHandle === "overwrite") {
            // Stops every monitor first, so it doesn't execute any heartbeat while importing
            for (let id in apiserver.monitorList) {
                let monitor = apiserver.monitorList[id];
                await monitor.stop();
            }
            await R.exec("DELETE FROM heartbeat");
            await R.exec("DELETE FROM monitor_notification");
            await R.exec("DELETE FROM monitor_tls_info");
            await R.exec("DELETE FROM notification");
            await R.exec("DELETE FROM monitor_tag");
            await R.exec("DELETE FROM tag");
            await R.exec("DELETE FROM monitor");
            await R.exec("DELETE FROM proxy");
        }

        // Only starts importing if the backup file contains at least one notification
        if (notificationListData.length >= 1) {
            // Get every existing notification name and puts them in one simple string
            let notificationNameList = await R.getAll("SELECT name FROM notification");
            let notificationNameListString = JSON.stringify(notificationNameList);

            for (let i = 0; i < notificationListData.length; i++) {
                // Only starts importing the notification if the import option is "overwrite", "keep" or "skip" but the notification doesn't exists
                if ((importHandle === "skip" && notificationNameListString.includes(notificationListData[i].name) === false) || importHandle === "keep" || importHandle === "overwrite") {

                    let notification = JSON.parse(notificationListData[i].config);
                    await Notification.save(notification, null, null);

                }
            }
        }

        // Only starts importing if the backup file contains at least one proxy
        if (proxyListData && proxyListData.length >= 1) {
            const proxies = await R.findAll("proxy");

            // Loop over proxy list and save proxies
            for (const proxy of proxyListData) {
                const exists = proxies.find(item => item.id === proxy.id);

                // Do not process when proxy already exists in import handle is skip and keep
                if ([ "skip", "keep" ].includes(importHandle) && !exists) {
                    return;
                }

                // Save proxy as new entry if exists update exists one
                await Proxy.save(proxy, exists ? proxy.id : undefined, proxy.userId);
            }
        }

        // Only starts importing if the backup file contains at least one monitor
        if (monitorListData.length >= 1) {
            // Get every existing monitor name and puts them in one simple string
            let monitorNameList = await R.getAll("SELECT name FROM monitor");
            let monitorNameListString = JSON.stringify(monitorNameList);

            for (let i = 0; i < monitorListData.length; i++) {
                // Only starts importing the monitor if the import option is "overwrite", "keep" or "skip" but the notification doesn't exists
                if ((importHandle === "skip" && monitorNameListString.includes(monitorListData[i].name) === false) || importHandle === "keep" || importHandle === "overwrite") {

                    // Define in here every new variable for monitors which where implemented after the first version of the Import/Export function (1.6.0)
                    // --- Start ---

                    // Define default values
                    let retryInterval = 0;

                    /*
                    Only replace the default value with the backup file data for the specific version, where it appears the first time
                    More information about that where "let version" will be defined
                    */
                    if (version17x) {
                        retryInterval = monitorListData[i].retryInterval;
                    }

                    // --- End ---

                    let monitor = {
                        // Define the new variable from earlier here
                        name: monitorListData[i].name,
                        type: monitorListData[i].type,
                        url: monitorListData[i].url,
                        method: monitorListData[i].method || "GET",
                        body: monitorListData[i].body,
                        headers: monitorListData[i].headers,
                        authMethod: monitorListData[i].authMethod,
                        basic_auth_user: monitorListData[i].basic_auth_user,
                        basic_auth_pass: monitorListData[i].basic_auth_pass,
                        authWorkstation: monitorListData[i].authWorkstation,
                        authDomain: monitorListData[i].authDomain,
                        interval: monitorListData[i].interval,
                        retryInterval: retryInterval,
                        resendInterval: monitorListData[i].resendInterval || 0,
                        hostname: monitorListData[i].hostname,
                        maxretries: monitorListData[i].maxretries,
                        port: monitorListData[i].port,
                        keyword: monitorListData[i].keyword,
                        ignoreTls: monitorListData[i].ignoreTls,
                        upsideDown: monitorListData[i].upsideDown,
                        maxredirects: monitorListData[i].maxredirects,
                        accepted_statuscodes: monitorListData[i].accepted_statuscodes,
                        dns_resolve_type: monitorListData[i].dns_resolve_type,
                        dns_resolve_server: monitorListData[i].dns_resolve_server,
                        notificationIDList: {},
                        proxy_id: monitorListData[i].proxy_id || null,
                    };

                    if (monitorListData[i].pushToken) {
                        monitor.pushToken = monitorListData[i].pushToken;
                    }

                    let bean = R.dispense("monitor");

                    let notificationIDList = monitor.notificationIDList;
                    delete monitor.notificationIDList;

                    monitor.accepted_statuscodes_json = JSON.stringify(monitor.accepted_statuscodes);
                    delete monitor.accepted_statuscodes;

                    bean.import(monitor);
                    bean.user_id = null; 
                    await R.store(bean);

                    // Only for backup files with the version 1.7.0 or higher, since there was the tag feature implemented
                    if (version17x) {
                        // Only import if the specific monitor has tags assigned
                        for (const oldTag of monitorListData[i].tags) {

                            // Check if tag already exists and get data ->
                            let tag = await R.findOne("tag", " name = ?", [
                                oldTag.name,
                            ]);

                            let tagId;
                            if (! tag) {
                                // -> If it doesn't exist, create new tag from backup file
                                let beanTag = R.dispense("tag");
                                beanTag.name = oldTag.name;
                                beanTag.color = oldTag.color;
                                await R.store(beanTag);

                                tagId = beanTag.id;
                            } else {
                                // -> If it already exist, set tagId to value from database
                                tagId = tag.id;
                            }

                            // Assign the new created tag to the monitor
                            await R.exec("INSERT INTO monitor_tag (tag_id, monitor_id, value) VALUES (?, ?, ?)", [
                                tagId,
                                bean.id,
                                oldTag.value,
                            ]);

                        }
                    }

                    await updateMonitorNotification(bean.id, notificationIDList);

                    // If monitor was active start it immediately, otherwise pause it
                    if (monitorListData[i].active === 1) {
                        await startMonitor(socket.userID, bean.id);
                    } else {
                        await pauseMonitor(socket.userID, bean.id);
                    }

                }
            }

            await sendNotificationList(socket);
            await server.sendMonitorList(socket);
        }

        return 

    } catch (e) {
        callback({
            ok: false,
            msg: e.message,
        });
    }
});

module.exports = router;
